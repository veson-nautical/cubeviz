import { NonIdealState, Spinner } from '@blueprintjs/core';
import { CubeVizContextProvider, filterNulls } from '@cubeviz/core';
import Head from 'next/head';
import { useCubeApi } from '../hooks/use-cube-api';
import { EChartsXYChart } from '@cubeviz/echarts';
import { AgGridTable } from '@cubeviz/table';
import { CubeMultiSelect, CubeSuggest } from '@cubeviz/inputs';
import { useMemo, useState } from 'react';
import { Query } from '@cubejs-client/core';

function WidgetCard({ children }: { children: React.ReactNode }) {
  return <div className="w-[30rem] h-[20rem] m-2">{children}</div>;
}

export default function Home() {
  const cubeApi = useCubeApi();
  const [selectedCountries, setSelectedCountries] = useState([] as string[]);
  const [selectedDistrict, setSelectedDistrict] = useState<undefined | string>(
    undefined
  );
  const chartsBaseQuery = useMemo<Query>(
    () => ({
      filters: filterNulls([
        selectedCountries && selectedCountries.length > 0
          ? {
              member: 'Countries.name',
              operator: 'equals',
              values: selectedCountries,
            }
          : undefined,
        selectedDistrict
          ? {
              member: 'Cities.district',
              operator: 'equals',
              values: [selectedDistrict],
            }
          : undefined,
      ]),
    }),
    [selectedCountries, selectedDistrict]
  );
  return (
    <>
      <Head>
        <title>Cubeviz Demo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <CubeVizContextProvider
          cubejsApi={cubeApi}
          renderError={(error) => (
            <NonIdealState
              icon="error"
              title={error.name}
              description={error.message}
            />
          )}
          loadingDisplay={
            <NonIdealState icon={<Spinner />} title="Loading cubes..." />
          }
        >
          <div className="flex gap-8 p-8">
            <CubeMultiSelect
              title="Country name"
              valueBinding="Countries.name"
              labelBinding="Countries.totalPopulation"
              selectedItems={selectedCountries}
              setSelectedItems={(items) => {
                setSelectedCountries(items);
                setSelectedDistrict(undefined);
              }}
            />
            {selectedCountries.length > 0 && (
              <CubeSuggest
                valueBinding="Cities.district"
                labelBinding="Cities.population"
                selectedItem={selectedDistrict}
                baseQuery={{
                  filters: [
                    {
                      member: 'Countries.name',
                      operator: 'equals',
                      values: selectedCountries,
                    },
                  ],
                }}
                setSelectedItem={(item) => setSelectedDistrict(item)}
              />
            )}
          </div>
          <div className="flex">
            <WidgetCard>
              <EChartsXYChart
                x="Cities.name"
                y="Cities.population"
                binOther={10}
                chartType="bar"
                baseQuery={chartsBaseQuery}
              />
            </WidgetCard>
            <WidgetCard>
              <AgGridTable
                columns={['Cities.name', 'Cities.population']}
                baseQuery={chartsBaseQuery}
              />
            </WidgetCard>
          </div>
        </CubeVizContextProvider>
      </main>
    </>
  );
}
